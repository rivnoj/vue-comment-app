package com.grtech.util;

public class GeneralFunctions {
    private final static short[] crcTable = new short[] { 0x0000, 0x3D65, 0x7ACA, 0x47AF, (short)0xF594, (short)0xC8F1, (short)0x8F5E, (short)0xB23B,
            (short)0xD64D, (short)0xEB28, (short)0xAC87, (short)0x91E2, 0x23D9, 0x1EBC,
            0x5913, 0x6476, (short)0x91FF, (short)0xAC9A, (short)0xEB35, (short)0xD650, 0x646B, 0x590E, 0x1EA1, 0x23C4, 0x47B2, 0x7AD7, 0x3D78,
            0x001D,
            (short)0xB226, (short)0x8F43, (short)0xC8EC, (short)0xF589, 0x1E9B, 0x23FE, 0x6451, 0x5934, (short)0xEB0F, (short)0xD66A, (short)0x91C5, (short)0xACA0, (short)0xC8D6,
            (short)0xF5B3,
            (short)0xB21C, (short)0x8F79, 0x3D42, 0x0027, 0x4788, 0x7AED, (short)0x8F64, (short)0xB201, (short)0xF5AE, (short)0xC8CB, 0x7AF0, 0x4795, 0x003A,
            0x3D5F,
            0x5929, 0x644C, 0x23E3, 0x1E86, (short)0xACBD, (short)0x91D8, (short)0xD677, (short)0xEB12, 0x3D36, 0x0053, 0x47FC, 0x7A99, (short)0xC8A2,
            (short)0xF5C7,
            (short)0xB268, (short)0x8F0D, (short)0xEB7B, (short)0xD61E, (short)0x91B1, (short)0xACD4, 0x1EEF, 0x238A, 0x6425, 0x5940, (short)0xACC9, (short)0x91AC, (short)0xD603,
            (short)0xEB66,
            0x595D, 0x6438, 0x2397, 0x1EF2, 0x7A84, 0x47E1, 0x004E, 0x3D2B, (short)0x8F10, (short)0xB275, (short)0xF5DA, (short)0xC8BF, 0x23AD,
            0x1EC8,
            0x5967, 0x6402, (short)0xD639, (short)0xEB5C, (short)0xACF3, (short)0x9196, (short)0xF5E0, (short)0xC885, (short)0x8F2A, (short)0xB24F, 0x0074, 0x3D11, 0x7ABE,
            0x47DB,
            (short)0xB252, (short)0x8F37, (short)0xC898, (short)0xF5FD, 0x47C6, 0x7AA3, 0x3D0C, 0x0069, 0x641F, 0x597A, 0x1ED5, 0x23B0, (short)0x918B,
            (short)0xACEE,
            (short)0xEB41, (short)0xD624, 0x7A6C, 0x4709, 0x00A6, 0x3DC3, (short)0x8FF8, (short)0xB29D, (short)0xF532, (short)0xC857, (short)0xAC21, (short)0x9144, (short)0xD6EB,
            (short)0xEB8E,
            0x59B5, 0x64D0, 0x237F, 0x1E1A, (short)0xEB93, (short)0xD6F6, (short)0x9159, (short)0xAC3C, 0x1E07, 0x2362, 0x64CD, 0x59A8, 0x3DDE,
            0x00BB,
            0x4714, 0x7A71, (short)0xC84A, (short)0xF52F, (short)0xB280, (short)0x8FE5, 0x64F7, 0x5992, 0x1E3D, 0x2358, (short)0x9163, (short)0xAC06, (short)0xEBA9,
            (short)0xD6CC,
            (short)0xB2BA, (short)0x8FDF, (short)0xC870, (short)0xF515, 0x472E, 0x7A4B, 0x3DE4, 0x0081, (short)0xF508, (short)0xC86D, (short)0x8FC2, (short)0xB2A7, 0x009C,
            0x3DF9,
            0x7A56, 0x4733, 0x2345, 0x1E20, 0x598F, 0x64EA, (short)0xD6D1, (short)0xEBB4, (short)0xAC1B, (short)0x917E, 0x475A, 0x7A3F, 0x3D90,
            0x00F5,
            (short)0xB2CE, (short)0x8FAB, (short)0xC804, (short)0xF561, (short)0x9117, (short)0xAC72, (short)0xEBDD, (short)0xD6B8, 0x6483, 0x59E6, 0x1E49, 0x232C, (short)0xD6A5,
            (short)0xEBC0,
            (short)0xAC6F, (short)0x910A, 0x2331, 0x1E54, 0x59FB, 0x649E, 0x00E8, 0x3D8D, 0x7A22, 0x4747, (short)0xF57C, (short)0xC819, (short)0x8FB6,
            (short)0xB2D3,
            0x59C1, 0x64A4, 0x230B, 0x1E6E, (short)0xAC55, (short)0x9130, (short)0xD69F, (short)0xEBFA, (short)0x8F8C, (short)0xB2E9, (short)0xF546, (short)0xC823, 0x7A18,
            0x477D,
            0x00D2, 0x3DB7, (short)0xC83E, (short)0xF55B, (short)0xB2F4, (short)0x8F91, 0x3DAA, 0x00CF, 0x4760, 0x7A05, 0x1E73, 0x2316, 0x64B9,
            0x59DC,
            (short)0xEBE7, (short)0xD682, (short)0x912D, (short)0xAC48
    };

    public static void sleep(long milis) {
        try {
            Thread.sleep(milis);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public static short crc16DNP(byte[] buf, boolean inputReflected, boolean resultReflected) {
        int remainder = 0x0000;
        int data;

        if (inputReflected) {
            for (int i = 0; i < buf.length; i++) {
                buf[i] = reverseBitsInByte(buf[i]);
            }
        }
        
        /*
         * Divide the message by the polynomial, a byte at a time.
         */
        for (int i = 0; i < buf.length; i++) {
            data = (buf[i] ^ remainder >>> (16) - (8)) & 0xff;
            remainder = crcTable[data] ^ (remainder << 8);
        }
        /*
         * The final remainder is the CRC.
         */
        short res = (short) (remainder ^ (short) 0xFFFF);

        if (resultReflected) {
            byte hres = reverseBitsInByte((byte) ((res>>8)&0xff));
            byte lres = reverseBitsInByte((byte) (res&0xff));
            res = (short) (((lres<<8)&0xff00)+(hres&0x00ff));
        }

        return res;
    }

    public static byte reverseBitsInByte(byte b) {
        return (byte) (Integer.reverse(b<<24)&0xff);
    }
}
